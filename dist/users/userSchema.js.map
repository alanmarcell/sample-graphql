{"version":3,"sources":["../../dist-esnext/users/userSchema.js"],"names":["expiresIn","UserSchema","userApp","authedUser","log","userType","name","fields","id","type","userName","email","emailConfirmed","displayName","imgUrl","errors","userConnection","nodeType","getUserConnection","connectionType","args","resolve","_","ctx","findUsers","query","options","limit","first","createdBy","getSaveUserMutation","outputViewer","inputFields","password","outputFields","userEdge","edgeType","user","node","cursor","viewer","mutateAndGetPayload","userArgs","param2","param3","saveUser","savedUser","getAuthTokenMutation","userNameOrEmail","authToken","success","form","authTokenArgs","getAuthToken"],"mappings":"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","file":"userSchema.js","sourcesContent":["import { GraphQLBoolean, GraphQLInt, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLString } from 'graphql';\r\nimport { connectionArgs, connectionDefinitions, connectionFromPromisedArray, mutationWithClientMutationId } from 'graphql-relay';\r\nconst expiresIn = 1000000; // seconds\r\nfunction UserSchema({ userApp, authedUser, log }) {\r\n    const userType = new GraphQLObjectType({\r\n        name: 'User',\r\n        fields: () => ({\r\n            id: { type: GraphQLString },\r\n            userName: { type: GraphQLString },\r\n            email: { type: GraphQLString },\r\n            emailConfirmed: { type: GraphQLBoolean },\r\n            displayName: { type: GraphQLString },\r\n            imgUrl: { type: GraphQLString },\r\n            // createdBy,\r\n            // dtChanged,\r\n            errors: { type: new GraphQLList(GraphQLString) }\r\n        })\r\n    });\r\n    const userConnection = connectionDefinitions({\r\n        name: 'User',\r\n        nodeType: userType\r\n    });\r\n    function getUserConnection() {\r\n        return {\r\n            type: userConnection.connectionType,\r\n            args: connectionArgs,\r\n            resolve: (_, args, ctx) => {\r\n                log('getting users');\r\n                return connectionFromPromisedArray(userApp.findUsers({\r\n                    query: {},\r\n                    options: { limit: args.first },\r\n                    authedUser: ctx.createdBy\r\n                }), args);\r\n            }\r\n        };\r\n    }\r\n    function getSaveUserMutation(outputViewer) {\r\n        return mutationWithClientMutationId({\r\n            name: 'SaveUser',\r\n            inputFields: {\r\n                id: { type: GraphQLString },\r\n                userName: { type: new GraphQLNonNull(GraphQLString) },\r\n                email: { type: new GraphQLNonNull(GraphQLString) },\r\n                displayName: { type: new GraphQLNonNull(GraphQLString) },\r\n                password: { type: new GraphQLNonNull(GraphQLString) },\r\n                errors: { type: new GraphQLList(GraphQLString) }\r\n            },\r\n            outputFields: {\r\n                userEdge: {\r\n                    type: userConnection.edgeType,\r\n                    resolve: (user) => {\r\n                        // log('ql user', user);\r\n                        return { node: user, cursor: user.id };\r\n                    }\r\n                },\r\n                viewer: outputViewer\r\n            },\r\n            mutateAndGetPayload: async (userArgs, param2, param3) => {\r\n                try {\r\n                    log('saving user:', userArgs);\r\n                    // log('saving param2:', param2);\r\n                    // log('saving param3:', param3);\r\n                    const savedUser = await userApp.saveUser({\r\n                        userArgs,\r\n                        authedUser: null\r\n                    });\r\n                    log('saved user:', savedUser);\r\n                    return savedUser;\r\n                }\r\n                catch (e) {\r\n                    log('Error saving user:', e);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    function getAuthTokenMutation(outputViewer) {\r\n        return mutationWithClientMutationId({\r\n            name: 'GetAuthToken',\r\n            inputFields: {\r\n                userNameOrEmail: { type: new GraphQLNonNull(GraphQLString) },\r\n                password: { type: new GraphQLNonNull(GraphQLString) }\r\n            },\r\n            outputFields: {\r\n                userEdge: {\r\n                    type: userConnection.edgeType,\r\n                    resolve: (authToken) => {\r\n                        if (authToken.user == null)\r\n                            return null;\r\n                        return { node: authToken.user, cursor: authToken.user.id };\r\n                    }\r\n                },\r\n                authToken: {\r\n                    type: GraphQLString,\r\n                    resolve: (authToken) => authToken.authToken\r\n                },\r\n                expiresIn: {\r\n                    type: GraphQLInt,\r\n                    resolve: () => expiresIn,\r\n                },\r\n                success: {\r\n                    type: GraphQLBoolean,\r\n                    resolve: (authToken) => authToken.authToken ? true : false,\r\n                },\r\n                errors: {\r\n                    type: new GraphQLList(GraphQLString),\r\n                    resolve: (authToken) => authToken.errors\r\n                },\r\n                viewer: outputViewer\r\n            },\r\n            mutateAndGetPayload: async (form, param2, param3) => {\r\n                try {\r\n                    log('getAuthToken input:', form);\r\n                    const authTokenArgs = {\r\n                        form,\r\n                        authedUser\r\n                    };\r\n                    const authToken = await userApp.getAuthToken(authTokenArgs);\r\n                    log('getAuthToken return:', authToken);\r\n                    return authToken;\r\n                }\r\n                catch (e) {\r\n                    log('Error saving user:', e);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return {\r\n        getSaveUserMutation,\r\n        getUserConnection,\r\n        getAuthTokenMutation\r\n    };\r\n}\r\nexport default UserSchema;\r\n//# sourceMappingURL=userSchema.js.map"]}