{"version":3,"sources":["../../dist-esnext/users/userSchema.js"],"names":["expiresIn","UserSchema","userApp","authedUser","log","userType","name","fields","id","type","userName","email","emailConfirmed","displayName","imgUrl","errors","errorType","propName","errorMsg","userConnection","nodeType","getUserConnection","connectionType","args","resolve","_","ctx","findUsers","query","options","limit","first","createdBy","getSaveUserMutation","outputViewer","inputFields","password","outputFields","userEdge","edgeType","user","node","cursor","viewer","mutateAndGetPayload","userArgs","param2","param3","savedUser","saveUser","e","getAuthTokenMutation","userNameOrEmail","authToken","success","message","console","form","authTokenArgs","getAuthToken"],"mappings":"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","file":"userSchema.js","sourcesContent":["import { GraphQLBoolean, GraphQLInt, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLString } from 'graphql';\r\nimport { connectionArgs, connectionDefinitions, connectionFromPromisedArray, mutationWithClientMutationId } from 'graphql-relay';\r\nconst expiresIn = 1000000; // seconds\r\nfunction UserSchema({ userApp, authedUser, log }) {\r\n    const userType = new GraphQLObjectType({\r\n        name: 'User',\r\n        fields: () => ({\r\n            id: { type: GraphQLString },\r\n            userName: { type: GraphQLString },\r\n            email: { type: GraphQLString },\r\n            emailConfirmed: { type: GraphQLBoolean },\r\n            displayName: { type: GraphQLString },\r\n            imgUrl: { type: GraphQLString },\r\n            // createdBy,\r\n            // dtChanged,\r\n            errors: { type: new GraphQLList(errorType) }\r\n        })\r\n    });\r\n    const errorType = new GraphQLObjectType({\r\n        name: 'Errors',\r\n        fields: () => ({\r\n            propName: { type: GraphQLString },\r\n            errorMsg: { type: GraphQLString },\r\n        })\r\n    });\r\n    const userConnection = connectionDefinitions({\r\n        name: 'User',\r\n        nodeType: userType\r\n    });\r\n    function getUserConnection() {\r\n        return {\r\n            type: userConnection.connectionType,\r\n            args: connectionArgs,\r\n            resolve: (_, args, ctx) => {\r\n                log('getting users');\r\n                return connectionFromPromisedArray(userApp.findUsers({\r\n                    query: {},\r\n                    options: { limit: args.first },\r\n                    authedUser: ctx.createdBy\r\n                }), args);\r\n            }\r\n        };\r\n    }\r\n    function getSaveUserMutation(outputViewer) {\r\n        return mutationWithClientMutationId({\r\n            name: 'SaveUser',\r\n            inputFields: {\r\n                id: { type: GraphQLString },\r\n                userName: { type: new GraphQLNonNull(GraphQLString) },\r\n                email: { type: new GraphQLNonNull(GraphQLString) },\r\n                displayName: { type: new GraphQLNonNull(GraphQLString) },\r\n                password: { type: new GraphQLNonNull(GraphQLString) },\r\n                errors: { type: new GraphQLList(GraphQLString) }\r\n            },\r\n            outputFields: {\r\n                userEdge: {\r\n                    type: userConnection.edgeType,\r\n                    resolve: (user) => {\r\n                        // log('ql user', user);\r\n                        return { node: user, cursor: user.id };\r\n                    }\r\n                },\r\n                viewer: outputViewer\r\n            },\r\n            mutateAndGetPayload: async (userArgs, param2, param3) => {\r\n                try {\r\n                    log('saving user:', userArgs);\r\n                    // log('saving param2:', param2);\r\n                    // log('saving param3:', param3);\r\n                    const savedUser = await userApp.saveUser({\r\n                        userArgs,\r\n                        authedUser: null\r\n                    });\r\n                    log('saved user:', savedUser);\r\n                    return savedUser;\r\n                }\r\n                catch (e) {\r\n                    log('Error saving user:', e);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    function getAuthTokenMutation(outputViewer) {\r\n        return mutationWithClientMutationId({\r\n            name: 'GetAuthToken',\r\n            inputFields: {\r\n                userNameOrEmail: { type: new GraphQLNonNull(GraphQLString) },\r\n                password: { type: new GraphQLNonNull(GraphQLString) }\r\n            },\r\n            outputFields: {\r\n                userEdge: {\r\n                    type: userConnection.edgeType,\r\n                    resolve: (authToken) => {\r\n                        if (authToken.user == null)\r\n                            return null;\r\n                        return { node: authToken.user, cursor: authToken.user.id };\r\n                    }\r\n                },\r\n                authToken: {\r\n                    type: GraphQLString,\r\n                    resolve: (authToken) => authToken.authToken\r\n                },\r\n                expiresIn: {\r\n                    type: GraphQLInt,\r\n                    resolve: () => expiresIn,\r\n                },\r\n                success: {\r\n                    type: GraphQLBoolean,\r\n                    resolve: (authToken) => authToken.authToken ? true : false,\r\n                },\r\n                message: {\r\n                    type: GraphQLString,\r\n                    resolve: (authToken) => authToken.authToken\r\n                        ? ''\r\n                        : 'Auth Failed, review your credentials',\r\n                },\r\n                errors: {\r\n                    type: new GraphQLList(errorType),\r\n                    resolve: (authToken) => {\r\n                        console.log(authToken.errors);\r\n                        return authToken.errors;\r\n                    }\r\n                },\r\n                viewer: outputViewer\r\n            },\r\n            mutateAndGetPayload: async (form, param2, param3) => {\r\n                try {\r\n                    log('getAuthToken input:', form);\r\n                    const authTokenArgs = {\r\n                        form,\r\n                        authedUser\r\n                    };\r\n                    const authToken = await userApp.getAuthToken(authTokenArgs);\r\n                    log('getAuthToken return:', authToken);\r\n                    return authToken;\r\n                }\r\n                catch (e) {\r\n                    log('Error saving user:', e);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return {\r\n        getSaveUserMutation,\r\n        getUserConnection,\r\n        getAuthTokenMutation\r\n    };\r\n}\r\nexport default UserSchema;\r\n//# sourceMappingURL=userSchema.js.map"]}