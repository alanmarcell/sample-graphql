{"version":3,"sources":["../dist-esnext/index.js"],"names":["schema","json","file","fs","writeFile","JSON","stringify","err","log","getRunningUrl","app","use","static","createGraphqlSchema","config","dir","PORT","path","userRepository","userApp","authedUser","dtCreated","Date","ip","seed","graphqlFolder","graphiql","listen","url"],"mappings":";;;uEAqBA,iBAAmCA,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACuB,sBAAQA,MAAR,gCADvB;;AAAA;AACUC,4BADV;AAEUC,4BAFV,GAEiB,qBAFjB;;AAGIC,2BAAGC,SAAH,OAAiBF,IAAjB,EAAyBG,KAAKC,SAAL,CAAeL,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAzB,EAAwD,eAAO;AAC3D,gCAAIM,GAAJ,EACI,MAAMA,GAAN;AACJC,gCAAI,sBAAJ,EAA4BC,cAAcP,IAAd,CAA5B;AACH,yBAJD;AAKAQ,4BAAIC,GAAJ,CAAQ,SAAR,EAAmB,kBAAQC,MAAR,CAAe,QAAf,CAAnB;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,mB;;;;;AArBf;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;IAAYV,E;;AACZ;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;;;;;;;AAXA,iBAAOW,MAAP;;AAYA,IAAMN,MAAM,0BAAQ,EAAEO,KAAK,QAAP,EAAR,CAAZ;AACA,IAAML,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,qBAAR;AACAH,IAAI,iBAAJ;AACA,IAAMQ,OAAO,IAAb;AACA,SAASP,aAAT,CAAuBQ,IAAvB,EAA6B;AACzB,iCAA2BD,IAA3B,GAAkCC,IAAlC;AACH;;AAWD,wDAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAGiC,mEAAgC,MAAhC,CAHjC;;AAAA;AAAA;AAAA,mCAIWT,GAJX;AAAA;AAGWU,sCAHX;AAIWV,2BAJX;AAAA;AAEaW,2BAFb;AAMaC,8BANb,GAM0B;AACfC,mCAAW,IAAIC,IAAJ,EADI;AAEfC,4BAAI;AAFW,qBAN1B;AAAA;AAAA,2BAUaJ,QAAQK,IAAR,CAAaJ,UAAb,CAVb;;AAAA;AAWapB,0BAXb,GAWsB,sBAAOmB,OAAP,EAAgBC,UAAhB,EAA4BZ,GAA5B,CAXtB;AAYaiB,iCAZb,GAY6B,UAZ7B;;AAaOf,wBAAIC,GAAJ,CAAQc,aAAR,EAAuB,8BAAY;AAC/BzB,sCAD+B;AAE/B0B,kCAAU;AAFqB,qBAAZ,CAAvB;AAbP;AAAA,2BAiBab,oBAAoBb,MAApB,CAjBb;;AAAA;AAkBOU,wBAAIiB,MAAJ,CAAWX,IAAX,EAAiB,YAAM;AACnB,4BAAMY,MAAMnB,cAAcgB,aAAd,CAAZ;AACAjB,4CAAkBoB,GAAlB;AACH,qBAHD;AAlBP;AAAA;;AAAA;AAAA;AAAA;;AAwBOpB;;AAxBP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD;AA2BA","file":"index.js","sourcesContent":["import dotenv from 'dotenv';\r\ndotenv.config();\r\nimport cors from 'cors';\r\nimport express from 'express';\r\nimport GraphQlHttp from 'express-graphql';\r\nimport * as fs from 'fs';\r\nimport { graphql } from 'graphql';\r\nimport { introspectionQuery } from 'graphql/utilities';\r\nimport Schema from './core/schema';\r\nimport MONGO_URL from './mongoDbUrl';\r\nimport { createApp } from '@alanmarcell/ptz-user-app';\r\nimport { createUserRepository } from '@alanmarcell/ptz-user-repository';\r\nimport logFile from 'ptz-log-file';\r\nconst log = logFile({ dir: './logs' });\r\nconst app = express();\r\napp.use(cors());\r\nlog('starting server');\r\nconst PORT = 3012;\r\nfunction getRunningUrl(path) {\r\n    return `http://localhost:${PORT}${path}`;\r\n}\r\nasync function createGraphqlSchema(schema) {\r\n    const json = await graphql(schema, introspectionQuery);\r\n    const file = '/public/schema.json';\r\n    fs.writeFile(`.${file}`, JSON.stringify(json, null, 2), err => {\r\n        if (err)\r\n            throw err;\r\n        log('Json schema created!', getRunningUrl(file));\r\n    });\r\n    app.use('/public', express.static('public'));\r\n}\r\n(async () => {\r\n    try {\r\n        const userApp = createApp({\r\n            userRepository: await createUserRepository(MONGO_URL, 'user'),\r\n            log\r\n        });\r\n        const authedUser = {\r\n            dtCreated: new Date(),\r\n            ip: '0.0.0.0'\r\n        };\r\n        await userApp.seed(authedUser);\r\n        const schema = Schema(userApp, authedUser, log);\r\n        const graphqlFolder = '/graphql';\r\n        app.use(graphqlFolder, GraphQlHttp({\r\n            schema,\r\n            graphiql: true\r\n        }));\r\n        await createGraphqlSchema(schema);\r\n        app.listen(PORT, () => {\r\n            const url = getRunningUrl(graphqlFolder);\r\n            log(`Running on ${url}`);\r\n        });\r\n    }\r\n    catch (e) {\r\n        log(e);\r\n    }\r\n})();\r\n//# sourceMappingURL=index.js.map"]}