{"version":3,"sources":["../../../dist-esnext/prods/repository/productRepository.js"],"names":["createProductRepository","curry","url","collectionName","db","collection","save","getByIds","find","getById","getDbCollection","getOtherProductsWithSameProductName","getByProductName","product","query","_id","$ne","id","$or","name","select","toArray","productName","findOne"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AACO,MAAMA,4DAA0B,gBAAEC,KAAF;AAAA,iCAAQ,WAAOC,GAAP,EAAYC,cAAZ,EAA+B;AAC1E,cAAMC,KAAK,MAAM,8BAAMF,GAAN,CAAjB;AACA,cAAMG,aAAa,wCAAgBD,EAAhB,EAAoBD,cAApB,CAAnB;AACA,eAAO;AACHC,cADG;AAEHD,0BAFG;AAGHG,kBAAM,6BAAKD,UAAL,CAHH;AAIHE,sBAAU,iCAASF,UAAT,CAJP;AAKHG,kBAAM,6BAAKH,UAAL,CALH;AAMHI,qBAAS,gCAAQJ,UAAR,CANN;AAOHK,6BAAiB;AAAA,uBAAML,UAAN;AAAA,aAPd;AAQHM,iDAAqCA,oCAAoCN,UAApC,CARlC;AASHO,8BAAkBA,iBAAiBP,UAAjB;AATf,SAAP;AAWH,KAdsC;;AAAA;AAAA;AAAA;AAAA,KAAhC;AAeP,MAAMM,sCAAsC,gBAAEV,KAAF,CAAQ,CAACI,UAAD,EAAaQ,OAAb,KAAyB;AACzE,UAAMC,QAAQ;AACVC,aAAK,EAAEC,KAAKH,QAAQI,EAAf,EADK;AAEVC,aAAK,CACD,EAAEC,MAAMN,QAAQM,IAAhB,EADC;AAFK,KAAd;AAMA,UAAMC,SAAS;AACXD,cAAM;AADK,KAAf;AAGA,WAAOd,WACFG,IADE,CACGM,KADH,EACUM,MADV,EAEFC,OAFE,EAAP;AAGH,CAb2C,CAA5C;AAcA,MAAMT,mBAAmB,gBAAEX,KAAF,CAAQ,CAACI,UAAD,EAAaiB,WAAb,KAA6B;AAC1D,UAAMR,QAAQ;AACVI,aAAK,CAAC,EAAEC,MAAMG,WAAR,EAAD;AADK,KAAd;AAGA,WAAOjB,WACFkB,OADE,CACMT,KADN,CAAP;AAEH,CANwB,CAAzB;QAOSF,gB,GAAAA,gB;QAAkBD,mC,GAAAA,mC;AAC3B","file":"productRepository.js","sourcesContent":["import { find, getById, getByIds, getDb, getDbCollection, save } from 'ptz-core-repository';\r\nimport R from 'ramda';\r\nexport const createProductRepository = R.curry(async (url, collectionName) => {\r\n    const db = await getDb(url);\r\n    const collection = getDbCollection(db, collectionName);\r\n    return {\r\n        db,\r\n        collectionName,\r\n        save: save(collection),\r\n        getByIds: getByIds(collection),\r\n        find: find(collection),\r\n        getById: getById(collection),\r\n        getDbCollection: () => collection,\r\n        getOtherProductsWithSameProductName: getOtherProductsWithSameProductName(collection),\r\n        getByProductName: getByProductName(collection)\r\n    };\r\n});\r\nconst getOtherProductsWithSameProductName = R.curry((collection, product) => {\r\n    const query = {\r\n        _id: { $ne: product.id },\r\n        $or: [\r\n            { name: product.name }\r\n        ]\r\n    };\r\n    const select = {\r\n        name: 1\r\n    };\r\n    return collection\r\n        .find(query, select)\r\n        .toArray();\r\n});\r\nconst getByProductName = R.curry((collection, productName) => {\r\n    const query = {\r\n        $or: [{ name: productName }]\r\n    };\r\n    return collection\r\n        .findOne(query);\r\n});\r\nexport { getByProductName, getOtherProductsWithSameProductName };\r\n//# sourceMappingURL=productRepository.js.map"]}