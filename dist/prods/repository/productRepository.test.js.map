{"version":3,"sources":["../../../dist-esnext/prods/repository/productRepository.test.js"],"names":["Core","MONGO_URL","productRepository","describe","beforeEach","createProductRepository","it","product","id","category","name","price","product2","save","getOtherProductsWithSameProductName","productDb","getByProductName"],"mappings":";;AAAA;;AACA;;IAAYA,I;;;;;;AACZ,IAAMC,YAAY,yCAAlB;AACA,IAAIC,iBAAJ;AACAC,SAAS,mBAAT,EAA8B,YAAM;AAChCC,uEAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACmBJ,KAAKK,uBAAL,CAA6BJ,SAA7B,EAAwC,iBAAxC,CADnB;;AAAA;AACPC,yCADO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAX;AAGAC,aAAS,qCAAT,EAAgD,YAAM;AAClDG,WAAG,cAAH,0DAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,mCADS,GACC;AACZC,oCAAI,QADQ;AAEZC,0CAAU,UAFE;AAGZC,sCAAM,QAHM;AAIZC,uCAAO;AAJK,6BADD;AAOTC,oCAPS,GAOE;AACbJ,oCAAI,SADS;AAEbC,0CAAU,UAFG;AAGbC,sCAAM,QAHO;AAIbC,uCAAO;AAJM,6BAPF;AAAA;AAAA,mCAaTT,kBAAkBW,IAAlB,CAAuBN,OAAvB,CAbS;;AAAA;AAAA;AAAA,mCAcSL,kBAAkBY,mCAAlB,CAAsDF,QAAtD,CAdT;;AAAA;AAcTG,qCAdS;;AAef,kDAAMA,UAAU,CAAV,EAAaL,IAAnB,EAAyBE,SAASF,IAAlC;AACA,qDAASK,UAAU,CAAV,EAAaP,EAAtB,EAA0BI,SAASJ,EAAnC;;AAhBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAnB;AAkBAF,WAAG,WAAH,0DAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AACNC,mCADM,GACI;AACZC,oCAAI,QADQ;AAEZC,0CAAU,UAFE;AAGZC,sCAAM,oBAHM;AAIZC,uCAAO;AAJK,6BADJ;AAAA;AAAA,mCAOYT,kBAAkBY,mCAAlB,CAAsDP,OAAtD,CAPZ;;AAAA;AAONQ,qCAPM;;AAQZ,uDAAWA,SAAX;;AARY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAhB;AAUH,KA7BD;AA8BAZ,aAAS,kBAAT,EAA6B,YAAM;AAC/BG,WAAG,cAAH,0DAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,mCADS,GACC;AACZC,oCAAI,QADQ;AAEZC,0CAAU,UAFE;AAGZC,sCAAM,QAHM;AAIZC,uCAAO;AAJK,6BADD;AAAA;AAAA,mCAOTT,kBAAkBW,IAAlB,CAAuBN,OAAvB,CAPS;;AAAA;AAAA;AAAA,mCAQSL,kBAAkBc,gBAAlB,CAAmC,QAAnC,CART;;AAAA;AAQTD,qCARS;;AASf,+CAAGA,SAAH;AACA,kDAAMA,UAAUP,EAAhB,EAAoBD,QAAQC,EAA5B;AACA,kDAAMO,UAAUN,QAAhB,EAA0BF,QAAQE,QAAlC;AACA,kDAAMM,UAAUL,IAAhB,EAAsBH,QAAQG,IAA9B;AACA,kDAAMK,UAAUJ,KAAhB,EAAuBJ,QAAQI,KAA/B;;AAbe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAnB;AAeAL,WAAG,eAAH,0DAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AACVC,mCADU,GACA;AACZC,oCAAI,QADQ;AAEZC,0CAAU,UAFE;AAGZC,sCAAM,QAHM;AAIZC,uCAAO;AAJK,6BADA;AAAA;AAAA,mCAOVT,kBAAkBW,IAAlB,CAAuBN,OAAvB,CAPU;;AAAA;AAAA;AAAA,mCAQQL,kBAAkBc,gBAAlB,CAAmC,QAAnC,CARR;;AAAA;AAQVD,qCARU;;AAShB,+CAAGA,SAAH;AACA,kDAAMA,UAAUP,EAAhB,EAAoBD,QAAQC,EAA5B;AACA,kDAAMO,UAAUN,QAAhB,EAA0BF,QAAQE,QAAlC;AACA,kDAAMM,UAAUL,IAAhB,EAAsBH,QAAQG,IAA9B;AACA,kDAAMK,UAAUJ,KAAhB,EAAuBJ,QAAQI,KAA/B;;AAbgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAApB;AAeAL,WAAG,WAAH,0DAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACYJ,kBAAkBc,gBAAlB,CAAmC,YAAnC,CADZ;;AAAA;AACND,qCADM;;AAEZ,kDAAMA,SAAN;;AAFY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAhB;AAIH,KAnCD;AAoCH,CAtED;AAuEA","file":"productRepository.test.js","sourcesContent":["import { emptyArray, equal, notEqual, notOk, ok } from 'ptz-assert';\r\nimport * as Core from './index';\r\nconst MONGO_URL = 'mongodb://localhost:27017/ptz-core-repo';\r\nvar productRepository;\r\ndescribe('ProductRepository', () => {\r\n    beforeEach(async () => {\r\n        productRepository = await Core.createProductRepository(MONGO_URL, 'test-collection');\r\n    });\r\n    describe('getOtherProductsWithSameProductName', () => {\r\n        it('find by name', async () => {\r\n            const product = {\r\n                id: 'testid',\r\n                category: 'Hardware',\r\n                name: 'Hammer',\r\n                price: 50\r\n            };\r\n            const product2 = {\r\n                id: 'testid2',\r\n                category: 'Hardware',\r\n                name: 'Hammer',\r\n                price: 60\r\n            };\r\n            await productRepository.save(product);\r\n            const productDb = await productRepository.getOtherProductsWithSameProductName(product2);\r\n            equal(productDb[0].name, product2.name);\r\n            notEqual(productDb[0].id, product2.id);\r\n        });\r\n        it('not found', async () => {\r\n            const product = {\r\n                id: 'testid',\r\n                category: 'Hardware',\r\n                name: 'dgh3t4hd@gmail.com',\r\n                price: 50\r\n            };\r\n            const productDb = await productRepository.getOtherProductsWithSameProductName(product);\r\n            emptyArray(productDb);\r\n        });\r\n    });\r\n    describe('getByProductName', () => {\r\n        it('find by name', async () => {\r\n            const product = {\r\n                id: 'testid',\r\n                category: 'Hardware',\r\n                name: 'Hammer',\r\n                price: 60\r\n            };\r\n            await productRepository.save(product);\r\n            const productDb = await productRepository.getByProductName('Hammer');\r\n            ok(productDb);\r\n            equal(productDb.id, product.id);\r\n            equal(productDb.category, product.category);\r\n            equal(productDb.name, product.name);\r\n            equal(productDb.price, product.price);\r\n        });\r\n        it('find by price', async () => {\r\n            const product = {\r\n                id: 'testid',\r\n                category: 'Hardware',\r\n                name: 'Hammer',\r\n                price: 60\r\n            };\r\n            await productRepository.save(product);\r\n            const productDb = await productRepository.getByProductName('Hammer');\r\n            ok(productDb);\r\n            equal(productDb.id, product.id);\r\n            equal(productDb.category, product.category);\r\n            equal(productDb.name, product.name);\r\n            equal(productDb.price, product.price);\r\n        });\r\n        it('not found', async () => {\r\n            const productDb = await productRepository.getByProductName('dgdsfsfbsf');\r\n            notOk(productDb);\r\n        });\r\n    });\r\n});\r\n//# sourceMappingURL=productRepository.test.js.map"]}