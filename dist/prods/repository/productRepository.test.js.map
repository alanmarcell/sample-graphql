{"version":3,"sources":["../../../dist-esnext/prods/repository/productRepository.test.js"],"names":["Core","MONGO_URL","productRepository","describe","beforeEach","createProductRepository","it","product","id","category","name","price","product2","save","productDb","getOtherProductsWithSameProductName","getByProductName"],"mappings":";;AAAA;;AACA;;IAAYA,I;;;;;;AACZ,MAAMC,YAAY,yCAAlB;AACA,IAAIC,iBAAJ;AACAC,SAAS,mBAAT,EAA8B,MAAM;AAChCC,iCAAW,aAAY;AACnBF,4BAAoB,MAAMF,KAAKK,uBAAL,CAA6BJ,SAA7B,EAAwC,iBAAxC,CAA1B;AACH,KAFD;AAGAE,aAAS,qCAAT,EAAgD,MAAM;AAClDG,WAAG,cAAH,oBAAmB,aAAY;AAC3B,kBAAMC,UAAU;AACZC,oBAAI,QADQ;AAEZC,0BAAU,UAFE;AAGZC,sBAAM,QAHM;AAIZC,uBAAO;AAJK,aAAhB;AAMA,kBAAMC,WAAW;AACbJ,oBAAI,SADS;AAEbC,0BAAU,UAFG;AAGbC,sBAAM,QAHO;AAIbC,uBAAO;AAJM,aAAjB;AAMA,kBAAMT,kBAAkBW,IAAlB,CAAuBN,OAAvB,CAAN;AACA,kBAAMO,YAAY,MAAMZ,kBAAkBa,mCAAlB,CAAsDH,QAAtD,CAAxB;AACA,kCAAME,UAAU,CAAV,EAAaJ,IAAnB,EAAyBE,SAASF,IAAlC;AACA,qCAASI,UAAU,CAAV,EAAaN,EAAtB,EAA0BI,SAASJ,EAAnC;AACH,SAjBD;AAkBAF,WAAG,WAAH,oBAAgB,aAAY;AACxB,kBAAMC,UAAU;AACZC,oBAAI,QADQ;AAEZC,0BAAU,UAFE;AAGZC,sBAAM,oBAHM;AAIZC,uBAAO;AAJK,aAAhB;AAMA,kBAAMG,YAAY,MAAMZ,kBAAkBa,mCAAlB,CAAsDR,OAAtD,CAAxB;AACA,uCAAWO,SAAX;AACH,SATD;AAUH,KA7BD;AA8BAX,aAAS,kBAAT,EAA6B,MAAM;AAC/BG,WAAG,cAAH,oBAAmB,aAAY;AAC3B,kBAAMC,UAAU;AACZC,oBAAI,QADQ;AAEZC,0BAAU,UAFE;AAGZC,sBAAM,QAHM;AAIZC,uBAAO;AAJK,aAAhB;AAMA,kBAAMT,kBAAkBW,IAAlB,CAAuBN,OAAvB,CAAN;AACA,kBAAMO,YAAY,MAAMZ,kBAAkBc,gBAAlB,CAAmC,QAAnC,CAAxB;AACA,+BAAGF,SAAH;AACA,kCAAMA,UAAUN,EAAhB,EAAoBD,QAAQC,EAA5B;AACA,kCAAMM,UAAUL,QAAhB,EAA0BF,QAAQE,QAAlC;AACA,kCAAMK,UAAUJ,IAAhB,EAAsBH,QAAQG,IAA9B;AACA,kCAAMI,UAAUH,KAAhB,EAAuBJ,QAAQI,KAA/B;AACH,SAdD;AAeAL,WAAG,eAAH,oBAAoB,aAAY;AAC5B,kBAAMC,UAAU;AACZC,oBAAI,QADQ;AAEZC,0BAAU,UAFE;AAGZC,sBAAM,QAHM;AAIZC,uBAAO;AAJK,aAAhB;AAMA,kBAAMT,kBAAkBW,IAAlB,CAAuBN,OAAvB,CAAN;AACA,kBAAMO,YAAY,MAAMZ,kBAAkBc,gBAAlB,CAAmC,QAAnC,CAAxB;AACA,+BAAGF,SAAH;AACA,kCAAMA,UAAUN,EAAhB,EAAoBD,QAAQC,EAA5B;AACA,kCAAMM,UAAUL,QAAhB,EAA0BF,QAAQE,QAAlC;AACA,kCAAMK,UAAUJ,IAAhB,EAAsBH,QAAQG,IAA9B;AACA,kCAAMI,UAAUH,KAAhB,EAAuBJ,QAAQI,KAA/B;AACH,SAdD;AAeAL,WAAG,WAAH,oBAAgB,aAAY;AACxB,kBAAMQ,YAAY,MAAMZ,kBAAkBc,gBAAlB,CAAmC,YAAnC,CAAxB;AACA,kCAAMF,SAAN;AACH,SAHD;AAIH,KAnCD;AAoCH,CAtED;AAuEA","file":"productRepository.test.js","sourcesContent":["import { emptyArray, equal, notEqual, notOk, ok } from 'ptz-assert';\r\nimport * as Core from './index';\r\nconst MONGO_URL = 'mongodb://localhost:27017/ptz-core-repo';\r\nvar productRepository;\r\ndescribe('ProductRepository', () => {\r\n    beforeEach(async () => {\r\n        productRepository = await Core.createProductRepository(MONGO_URL, 'test-collection');\r\n    });\r\n    describe('getOtherProductsWithSameProductName', () => {\r\n        it('find by name', async () => {\r\n            const product = {\r\n                id: 'testid',\r\n                category: 'Hardware',\r\n                name: 'Hammer',\r\n                price: 50\r\n            };\r\n            const product2 = {\r\n                id: 'testid2',\r\n                category: 'Hardware',\r\n                name: 'Hammer',\r\n                price: 60\r\n            };\r\n            await productRepository.save(product);\r\n            const productDb = await productRepository.getOtherProductsWithSameProductName(product2);\r\n            equal(productDb[0].name, product2.name);\r\n            notEqual(productDb[0].id, product2.id);\r\n        });\r\n        it('not found', async () => {\r\n            const product = {\r\n                id: 'testid',\r\n                category: 'Hardware',\r\n                name: 'dgh3t4hd@gmail.com',\r\n                price: 50\r\n            };\r\n            const productDb = await productRepository.getOtherProductsWithSameProductName(product);\r\n            emptyArray(productDb);\r\n        });\r\n    });\r\n    describe('getByProductName', () => {\r\n        it('find by name', async () => {\r\n            const product = {\r\n                id: 'testid',\r\n                category: 'Hardware',\r\n                name: 'Hammer',\r\n                price: 60\r\n            };\r\n            await productRepository.save(product);\r\n            const productDb = await productRepository.getByProductName('Hammer');\r\n            ok(productDb);\r\n            equal(productDb.id, product.id);\r\n            equal(productDb.category, product.category);\r\n            equal(productDb.name, product.name);\r\n            equal(productDb.price, product.price);\r\n        });\r\n        it('find by price', async () => {\r\n            const product = {\r\n                id: 'testid',\r\n                category: 'Hardware',\r\n                name: 'Hammer',\r\n                price: 60\r\n            };\r\n            await productRepository.save(product);\r\n            const productDb = await productRepository.getByProductName('Hammer');\r\n            ok(productDb);\r\n            equal(productDb.id, product.id);\r\n            equal(productDb.category, product.category);\r\n            equal(productDb.name, product.name);\r\n            equal(productDb.price, product.price);\r\n        });\r\n        it('not found', async () => {\r\n            const productDb = await productRepository.getByProductName('dgdsfsfbsf');\r\n            notOk(productDb);\r\n        });\r\n    });\r\n});\r\n//# sourceMappingURL=productRepository.test.js.map"]}