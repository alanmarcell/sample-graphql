{"version":3,"sources":["../../dist-esnext/prods/prodsSchema.js"],"names":["log","res","method","url","then","response","push","data","flatten","_getProds","prodArgs","createdBy","save","prodApp","ProdsSchema","prodsType","name","fields","_id","type","price","category","prodsConnection","nodeType","getProds","connectionType","args","resolve","_","ctx","getSaveProdMutation","inputFields","id","prodName","email","displayName","password","errors","outputFields","prodEdge","edgeType","prod","node","cursor","mutateAndGetPayload","param2","param3","savedProd"],"mappings":"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","file":"prodsSchema.js","sourcesContent":["import axios from 'axios';\r\nimport { GraphQLInt, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLString } from 'graphql';\r\nimport { connectionArgs, connectionDefinitions, connectionFromPromisedArray, mutationWithClientMutationId } from 'graphql-relay';\r\nimport R from 'ramda';\r\nasync function _getProds(log) {\r\n    const res = [];\r\n    await axios({\r\n        method: 'get',\r\n        url: 'http://localhost:3010/api/products'\r\n    }).then((response) => {\r\n        res.push(response.data);\r\n    });\r\n    // await axios({\r\n    //     method: 'get',\r\n    //     url: 'http://localhost:3030/api/products'\r\n    // }).then((response) => {\r\n    //     res.push(response.data);\r\n    // });\r\n    return (R.flatten(res));\r\n}\r\nasync function save({ prodArgs, createdBy, log }) {\r\n    const res = [];\r\n    log(prodArgs);\r\n    await axios({\r\n        method: 'post',\r\n        url: 'http://localhost:3010/api/product',\r\n        data: prodArgs\r\n    }).then((response) => {\r\n        log('prodArgs', prodArgs);\r\n        res.push(response.data);\r\n    });\r\n    // await axios({\r\n    //     method: 'get',\r\n    //     url: 'http://localhost:3030/api/products'\r\n    // }).then((response) => {\r\n    //     res.push(response.data);\r\n    // });\r\n    return (R.flatten(res));\r\n}\r\nconst prodApp = {\r\n    save\r\n};\r\nfunction ProdsSchema(log) {\r\n    const prodsType = new GraphQLObjectType({\r\n        name: 'Prods',\r\n        fields: () => ({\r\n            _id: { type: GraphQLString },\r\n            name: { type: GraphQLString },\r\n            price: { type: GraphQLInt },\r\n            category: { type: GraphQLString }\r\n        })\r\n    });\r\n    const prodsConnection = connectionDefinitions({\r\n        name: 'Prods',\r\n        nodeType: prodsType\r\n    });\r\n    function getProds() {\r\n        return {\r\n            type: prodsConnection.connectionType,\r\n            args: connectionArgs,\r\n            resolve: (_, args, ctx) => {\r\n                log('getting prods');\r\n                return connectionFromPromisedArray(_getProds(log), args);\r\n            }\r\n        };\r\n    }\r\n    function getSaveProdMutation() {\r\n        return mutationWithClientMutationId({\r\n            name: 'SaveProd',\r\n            inputFields: {\r\n                id: { type: GraphQLString },\r\n                prodName: { type: new GraphQLNonNull(GraphQLString) },\r\n                email: { type: new GraphQLNonNull(GraphQLString) },\r\n                displayName: { type: new GraphQLNonNull(GraphQLString) },\r\n                password: { type: new GraphQLNonNull(GraphQLString) },\r\n                errors: { type: new GraphQLList(GraphQLString) }\r\n            },\r\n            outputFields: {\r\n                prodEdge: {\r\n                    type: prodsConnection.edgeType,\r\n                    resolve: (prod) => {\r\n                        log('ql prod', prod);\r\n                        return { node: prod, cursor: prod.id };\r\n                    }\r\n                }\r\n            },\r\n            mutateAndGetPayload: async (prodArgs, param2, param3) => {\r\n                try {\r\n                    log('saving prod:', prodArgs);\r\n                    log('saving param2:', param2);\r\n                    log('saving param3:', param3);\r\n                    const savedProd = await prodApp.save({\r\n                        prodArgs,\r\n                        createdBy: null,\r\n                        log\r\n                    });\r\n                    log('saved prod:', savedProd);\r\n                    return savedProd;\r\n                }\r\n                catch (e) {\r\n                    log('Error saving prod:', e);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return {\r\n        getProds,\r\n        getSaveProdMutation\r\n    };\r\n}\r\nexport default ProdsSchema;\r\n//# sourceMappingURL=prodsSchema.js.map"]}