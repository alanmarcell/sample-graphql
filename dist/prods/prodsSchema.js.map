{"version":3,"sources":["../../dist-esnext/prods/prodsSchema.js"],"names":["ProdsSchema","productApp","authedUser","log","prodsType","name","fields","_id","type","price","category","prodsConnection","nodeType","getProds","connectionType","args","resolve","_","ctx","findProducts","query","options","limit","first","createdBy","getSaveProdMutation","inputFields","id","prodName","email","displayName","password","errors","outputFields","prodEdge","edgeType","prod","node","cursor","mutateAndGetPayload","productArgs","param2","param3","savedProduct","saveProduct","e"],"mappings":";;;;;;AAAA;;AACA;;;;AACA,SAASA,WAAT,CAAqB,EAAEC,UAAF,EAAcC,UAAd,EAA0BC,GAA1B,EAArB,EAAsD;AAClD,UAAMC,YAAY,+BAAsB;AACpCC,cAAM,OAD8B;AAEpCC,gBAAQ,OAAO;AACXC,iBAAK,EAAEC,4BAAF,EADM;AAEXH,kBAAM,EAAEG,4BAAF,EAFK;AAGXC,mBAAO,EAAED,2BAAF,EAHI;AAIXE,sBAAU,EAAEF,4BAAF;AAJC,SAAP;AAF4B,KAAtB,CAAlB;AASA,UAAMG,kBAAkB,yCAAsB;AAC1CN,cAAM,OADoC;AAE1CO,kBAAUR;AAFgC,KAAtB,CAAxB;AAIA,aAASS,QAAT,GAAoB;AAChB,eAAO;AACHL,kBAAMG,gBAAgBG,cADnB;AAEHC,8CAFG;AAGHC,qBAAS,CAACC,CAAD,EAAIF,IAAJ,EAAUG,GAAV,KAAkB;AACvBf,oBAAI,eAAJ;AACA,uBAAO,+CAA4BF,WAAWkB,YAAX,CAAwB;AACvDC,2BAAO,EADgD;AAEvDC,6BAAS,EAAEC,OAAOP,KAAKQ,KAAd,EAF8C;AAGvDrB,gCAAYgB,IAAIM;AAHuC,iBAAxB,CAA5B,EAIHT,IAJG,CAAP;AAKH;AAVE,SAAP;AAYH;AACD,aAASU,mBAAT,GAA+B;AAC3B,eAAO,gDAA6B;AAChCpB,kBAAM,UAD0B;AAEhCqB,yBAAa;AACTC,oBAAI,EAAEnB,4BAAF,EADK;AAEToB,0BAAU,EAAEpB,MAAM,mDAAR,EAFD;AAGTqB,uBAAO,EAAErB,MAAM,mDAAR,EAHE;AAITsB,6BAAa,EAAEtB,MAAM,mDAAR,EAJJ;AAKTuB,0BAAU,EAAEvB,MAAM,mDAAR,EALD;AAMTwB,wBAAQ,EAAExB,MAAM,gDAAR;AANC,aAFmB;AAUhCyB,0BAAc;AACVC,0BAAU;AACN1B,0BAAMG,gBAAgBwB,QADhB;AAENnB,6BAAUoB,IAAD,IAAU;AACfjC,4BAAI,SAAJ,EAAeiC,IAAf;AACA,+BAAO,EAAEC,MAAMD,IAAR,EAAcE,QAAQF,KAAKT,EAA3B,EAAP;AACH;AALK;AADA,aAVkB;AAmBhCY;AAAA,6CAAqB,WAAOC,WAAP,EAAoBC,MAApB,EAA4BC,MAA5B,EAAuC;AACxD,wBAAI;AACAvC,4BAAI,cAAJ,EAAoBqC,WAApB;AACArC,4BAAI,gBAAJ,EAAsBsC,MAAtB;AACAtC,4BAAI,gBAAJ,EAAsBuC,MAAtB;AACA,8BAAMC,eAAe,MAAM1C,WAAW2C,WAAX,CAAuB;AAC9CJ,uCAD8C;AAE9CtC,wCAAY;AAFkC,yBAAvB,CAA3B;AAIAC,4BAAI,gBAAJ,EAAsBwC,YAAtB;AACA,+BAAOA,YAAP;AACH,qBAVD,CAWA,OAAOE,CAAP,EAAU;AACN1C,4BAAI,oBAAJ,EAA0B0C,CAA1B;AACH;AACJ,iBAfD;;AAAA;AAAA;AAAA;AAAA;AAnBgC,SAA7B,CAAP;AAoCH;AACD,WAAO;AACHhC,gBADG;AAEHY;AAFG,KAAP;AAIH;kBACczB,W;AACf","file":"prodsSchema.js","sourcesContent":["import { GraphQLFloat, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLString } from 'graphql';\r\nimport { connectionArgs, connectionDefinitions, connectionFromPromisedArray, mutationWithClientMutationId } from 'graphql-relay';\r\nfunction ProdsSchema({ productApp, authedUser, log }) {\r\n    const prodsType = new GraphQLObjectType({\r\n        name: 'Prods',\r\n        fields: () => ({\r\n            _id: { type: GraphQLString },\r\n            name: { type: GraphQLString },\r\n            price: { type: GraphQLFloat },\r\n            category: { type: GraphQLString }\r\n        })\r\n    });\r\n    const prodsConnection = connectionDefinitions({\r\n        name: 'Prods',\r\n        nodeType: prodsType\r\n    });\r\n    function getProds() {\r\n        return {\r\n            type: prodsConnection.connectionType,\r\n            args: connectionArgs,\r\n            resolve: (_, args, ctx) => {\r\n                log('getting prods');\r\n                return connectionFromPromisedArray(productApp.findProducts({\r\n                    query: {},\r\n                    options: { limit: args.first },\r\n                    authedUser: ctx.createdBy\r\n                }), args);\r\n            }\r\n        };\r\n    }\r\n    function getSaveProdMutation() {\r\n        return mutationWithClientMutationId({\r\n            name: 'SaveProd',\r\n            inputFields: {\r\n                id: { type: GraphQLString },\r\n                prodName: { type: new GraphQLNonNull(GraphQLString) },\r\n                email: { type: new GraphQLNonNull(GraphQLString) },\r\n                displayName: { type: new GraphQLNonNull(GraphQLString) },\r\n                password: { type: new GraphQLNonNull(GraphQLString) },\r\n                errors: { type: new GraphQLList(GraphQLString) }\r\n            },\r\n            outputFields: {\r\n                prodEdge: {\r\n                    type: prodsConnection.edgeType,\r\n                    resolve: (prod) => {\r\n                        log('ql prod', prod);\r\n                        return { node: prod, cursor: prod.id };\r\n                    }\r\n                }\r\n            },\r\n            mutateAndGetPayload: async (productArgs, param2, param3) => {\r\n                try {\r\n                    log('saving prod:', productArgs);\r\n                    log('saving param2:', param2);\r\n                    log('saving param3:', param3);\r\n                    const savedProduct = await productApp.saveProduct({\r\n                        productArgs,\r\n                        authedUser: null\r\n                    });\r\n                    log('saved product:', savedProduct);\r\n                    return savedProduct;\r\n                }\r\n                catch (e) {\r\n                    log('Error saving prod:', e);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return {\r\n        getProds,\r\n        getSaveProdMutation\r\n    };\r\n}\r\nexport default ProdsSchema;\r\n//# sourceMappingURL=prodsSchema.js.map"]}